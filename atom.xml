<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ThinLin</title>
  <subtitle>意义大于目的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iskcal.github.io/"/>
  <updated>2017-02-24T08:49:36.000Z</updated>
  <id>http://iskcal.github.io/</id>
  
  <author>
    <name>Iskcal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中的闭包</title>
    <link href="http://iskcal.github.io/2017/02/24/python-closure/"/>
    <id>http://iskcal.github.io/2017/02/24/python-closure/</id>
    <published>2017-02-24T06:45:27.000Z</published>
    <updated>2017-02-24T08:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>闭包这个概念，在函数式编程语言用的非常多，由于Python也具有一定的函数式编程的能力，自然也就会有闭包了。</p>
<p>我们先来看看闭包是啥。简而言之，即某个函数A返回一个函数B，但函数B包含一些函数A中的变量。用Python代码表示为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_config</span><span class="params">(k, b)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">return</span> k*x+b</div><div class="line">    <span class="keyword">return</span> line</div><div class="line"></div><div class="line">line1 = line_config(<span class="number">2</span>, <span class="number">0</span>)</div><div class="line">print(line1(<span class="number">4</span>))  <span class="comment"># 输出8</span></div><div class="line">line2 = line_config(<span class="number">1</span>, <span class="number">0</span>)</div><div class="line">print(line2(<span class="number">3</span>))  <span class="comment"># 输出3</span></div></pre></td></tr></table></figure>
<p>可以看到，这里在<code>line_config</code>函数内部又定义了一个<code>line</code>函数。不仅如此，还有在<code>line</code>函数内部使用了其外部函数中的<code>k</code>和<code>b</code>变量。我们在<code>line_config</code>函数的范围内定义了函数<code>line</code>只能在<code>line_config</code>函数作用范围内使用。但实际情况是，内部定义的函数不仅可以在外部使用（第6行），而且还可以在外部调用时仍可以使用之前已经执行完成的<code>k</code>和<code>b</code>变量，这两点并不符合变量作用域范围的常识。这里，我们把这两个不符合作用域范围的变量<code>k</code>和<code>b</code>称之为环境变量，而内部的<code>line</code>函数和其环境变量合在一起，就形成了一个闭包(closure)。</p>
<h1 id="闭包有什么用呢"><a href="#闭包有什么用呢" class="headerlink" title="闭包有什么用呢"></a>闭包有什么用呢</h1><p>很多人初次见到闭包，往往只认为它是一种新特性，并且这种特性似乎只增加了一种新概念，对于编程似乎没有多大的提升，反而使得简单的问题复杂化。那么为什么要有闭包呢？一个字，懒。这种新特性只是简化代码的编写，并使得可读性变得更强。其具体体现在Python的一个强大的功能：装饰器，关于装饰器这里暂且不表。我们就对上面的一个例子做个分析吧。</p>
<p>有人肯定会说，上面的例子太麻烦了，写成下面这样的更好：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">line</span><span class="params">(k, b, x)</span>:</span></div><div class="line">    <span class="keyword">return</span> k*x + b</div></pre></td></tr></table></figure>
<p>看起来，下面这种代码非常少，仅仅2行足矣。但是如果有大量的线性函数需要表达，并且未来涉及到改动，那么后者的改动量实在太大了。举个例子，有50个线性函数，每个函数计算100个点，假如需要把某个函数进行修改，那么只修改一个函数后者就需要操作100次，而前者仅仅需要一次即可。</p>
<p>我们来看看闭包的代码，第6、7行相当于定义了一个线性函数。第7、9行相当于给定了一个x值，通过线性函数计算对应的y值。可以看出之后调用时斜率与截距会默认保存下来，也就是说内部函数保存了一个上下文环境，这个环境是实例性的，即不同的调用会产生不同的上下文，形成不同的线性函数。</p>
<h1 id="nonlocal-语句"><a href="#nonlocal-语句" class="headerlink" title="nonlocal 语句"></a>nonlocal 语句</h1><p>在Python中，内部函数默认是可以读自由变量的，但是并没有办法写。在 Python 2 中只能将这个自由变量提升到全局变量，但是这种方法潜在危害性太大，毕竟没有哪一门语言提倡使用全局变量。Python 3 中给出了另一种方法，使用 nonlocal 语句。举个例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 闭包，用于记录func函数被调用了多少次</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">recordCall</span><span class="params">(func)</span>:</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> count</div><div class="line">        count += <span class="number">1</span></div><div class="line">        func()</div><div class="line">        print(<span class="string">"第%d次调用"</span> % count)</div><div class="line">    <span class="keyword">return</span> counter</div><div class="line"></div><div class="line"><span class="comment"># 测试函数，结合闭包，用于测试该函数调用多少次</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testFunction</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Hello world!"</span>)</div><div class="line"></div><div class="line">callTime = recordCall(testFunction)</div><div class="line">callTime()</div><div class="line"><span class="comment"># 输出</span></div><div class="line"><span class="comment"># Hello world!</span></div><div class="line"><span class="comment"># 第1次调用</span></div><div class="line">callTime()</div><div class="line"><span class="comment"># 输出</span></div><div class="line"><span class="comment"># Hello world!</span></div><div class="line"><span class="comment"># 第2次调用</span></div></pre></td></tr></table></figure>
<p>这是一个闭包非常常用且实际的例子，这里的闭包用于记录传入的函数（Python中可以把函数当作对象传入函数中）被调用多少次。这里其实有一点装饰器的影子。注意内部的函数，nonlocal语句用于查找其自由变量，接下来的语句就是对其进行修改赋值，再然后执行传入的函数，输出次数，逻辑就这么多。可以看到使用闭包后，可以对任意一个函数记录其次数，但是仍有漏洞，如果调用原来的<code>testFunction</code>，发现并不会记录次数。改进的方法也很简单，只需要把<code>callTime</code>改成原来的<code>testFunction</code>即可，即第15行改为<code>testFunction = recordCall(testFunction)</code>，那么在此之后，任意地方调用<code>testFunction()</code>都会记录次数并输出次数。</p>
<h1 id="循环与闭包"><a href="#循环与闭包" class="headerlink" title="循环与闭包"></a>循环与闭包</h1><p>在闭包这里，还需要说明的一点是，闭包只保存自由变量，并不保存自由变量的值。当调用内部函数时，才会去寻找自由变量的值。这点非常具有迷惑性，下面就是一个例子。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">    arr = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">return</span> i*i</div><div class="line">        arr.append(square)</div><div class="line">    <span class="keyword">return</span> arr</div><div class="line"></div><div class="line">result = wrapper()</div><div class="line">print(result[<span class="number">0</span>]()) <span class="comment"># 输出 4</span></div><div class="line">print(result[<span class="number">1</span>]()) <span class="comment"># 输出 4</span></div><div class="line">print(result[<span class="number">2</span>]()) <span class="comment"># 输出 4</span></div></pre></td></tr></table></figure>
<p>头有点大，我们慢慢来看。首先先不管<code>square</code>函数，我们先只看<code>wrapper</code>函数，这个函数很一般，我们定义了一个列表<code>arr</code>，并用循环向内部添加了3个东西。之后，再看<code>square</code>函数，它定义在循环体内部，列表添加的是函数而不是值（<code>append</code>函数内部参数是<code>square</code>而不是<code>square()</code>，前者是函数，后者是值）。然后，函数的计算方式是序号的平方。最后调用这个函数，输出三个值，但是发现这三个值并不是 0,1,4 而是 4,4,4。这和我们的思考方式并不一样。</p>
<p>当然了，这里已经说过了自由变量会在调用的时候才会去查找相关值。因此，在第一次调用<code>result[0]()</code>这个函数时，它才会寻找<code>i</code>的值，此时i的值为2，返回4。之后几次调用，由于<code>i</code>值不变，因而都会返回4。如果要想实现我们之前所想的功能，只需要使用给定默认值即可，如下面代码，Python会在调用时保存相关的<code>i</code>值数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 默认参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">    arr = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(i=i)</span>:</span></div><div class="line">            <span class="keyword">return</span> i*i</div><div class="line">        arr.append(square)</div><div class="line">    <span class="keyword">return</span> arr</div><div class="line"></div><div class="line">result = wrapper()</div><div class="line">print(result[<span class="number">0</span>]()) <span class="comment"># 输出 0</span></div><div class="line">print(result[<span class="number">1</span>]()) <span class="comment"># 输出 1</span></div><div class="line">print(result[<span class="number">2</span>]()) <span class="comment"># 输出 4</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是闭包&quot;&gt;&lt;a href=&quot;#什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包&quot;&gt;&lt;/a&gt;什么是闭包&lt;/h1&gt;&lt;p&gt;闭包这个概念，在函数式编程语言用的非常多，由于Python也具有一定的函数式编程的能力，自然也就会有闭包了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://iskcal.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://iskcal.github.io/tags/python/"/>
    
      <category term="闭包" scheme="http://iskcal.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>博客正式启动啦</title>
    <link href="http://iskcal.github.io/2017/02/22/start/"/>
    <id>http://iskcal.github.io/2017/02/22/start/</id>
    <published>2017-02-22T10:20:28.000Z</published>
    <updated>2017-02-22T10:29:16.914Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/start.png" alt="博客启动" title="">
                </div>
                <div class="image-caption">博客启动</div>
            </figure>
<p>本博客正式启动了，虽然功能还有一些未完善，但是先跑起来再说吧。目前想法是在这里记录生活、学习、爱好等，把这里作为我自己的时间记录吧。就这样，加油。</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
    
    </summary>
    
      <category term="生活" scheme="http://iskcal.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="http://iskcal.github.io/tags/life/"/>
    
  </entry>
  
</feed>
